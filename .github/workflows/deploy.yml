name: deploy

on:
  push:
    branches: [ "main" ]
    paths:
      - "site/**"
      - "terraform/**"
      - ".github/workflows/deploy.yml"
  workflow_dispatch: {}

jobs:
  deploy:
    runs-on: ubuntu-latest

    # Needed for OIDC + checkout
    permissions:
      id-token: write
      contents: read

    env:
      AWS_REGION: eu-west-1
      ROLE_ARN: arn:aws:iam::412717960006:role/wa-static-site-gh-deploy

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
          # audience is optional and defaults to sts.amazonaws.com

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_wrapper: false

      - name: Init Terraform (read outputs only)
        working-directory: terraform
        run: |
          terraform init -input=false -upgrade

      - name: Read outputs from remote state
        id: res
        shell: bash
        run: |
          BUCKET="$(terraform -chdir=terraform output -raw bucket_name)"
          DISTID="$(terraform -chdir=terraform output -raw cloudfront_distribution_id || true)"
          echo "bucket=$BUCKET" >> "$GITHUB_OUTPUT"
          echo "distid=$DISTID" >> "$GITHUB_OUTPUT"

      - name: Sync site to S3
        run: |
          aws s3 sync site "s3://${{ steps.res.outputs.bucket }}/" --delete --only-show-errors

      - name: Invalidate CloudFront cache
        if: ${{ steps.res.outputs.distid != '' && steps.res.outputs.distid != 'None' }}
        run: |
          aws cloudfront create-invalidation \
            --distribution-id "${{ steps.res.outputs.distid }}" \
            --paths "/*"
